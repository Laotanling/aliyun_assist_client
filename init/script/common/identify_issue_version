#!/bin/bash

function is_digit()
{
    local str=$1
    ret=`expr match $str "[0-9]*$"`
    if [ ${ret} -gt 0 ]; then
        echo 1    # is digit
    else
       echo 0     # not is digit
    fi
}

function check_arch()
{
    list="/bin/ls /bin/cat /bin/echo /bin/grep /bin/date"
    arch_bit_32_num=0
    arch_bit_64_num=0
    arch_bit=64
    for bin in `echo $list`
    do
       file $des_dir/$bin | grep -i "32-bit" 1>/dev/null 2>&1
       if [ $? -eq 0 ]; then
           let arch_bit_32_num=$arch_bit_32_num+1
       fi
   
       file $des_dir/$bin | grep -i "64-bit" 1>/dev/null 2>&1
       if [ $? -eq 0 ]; then
           let arch_bit_64_num=$arch_bit_64_num+1
       fi
    done

    if [ $arch_bit_32_num -gt 1 ]; then
        arch_bit=32
    fi

    if [ $arch_bit_64_num -gt 1 ]; then
        arch_bit=64
    fi

	# finaly method
    if [ $arch_bit -eq -1 ]; then
		if ls $des_dir | grep -q 'lib64' ; then
			arch_bit=64
		else
			arch_bit=32
		fi
    fi
}

function get_redhat()
{
    grep -i -q 'Red Hat'      $des_dir/etc/issue >& /dev/null
    ret1=$?
    grep -i -q 'Aliyun Linux' $des_dir/etc/issue >& /dev/null
    ret2=$?
    if [[ $ret1 == 0 || $ret2 == 0 ]]; then
        vm_issue='redhat'
        enable_file="$des_dir/etc/issue"
        return
    fi
    if [ -f $des_dir/etc/redhat-release ]; then
        cat $des_dir/etc/redhat-release | grep -i "Red Hat" 1>/dev/null  2>&1
        ret1=$?
        cat $des_dir/etc/redhat-release | grep -i "Aliyun Linux" 1>/dev/null  2>&1
        ret2=$?
        if [ $ret1 -ne 1 -o $ret2 -ne 1 ]; then
            vm_issue="redhat"
            enable_file="$des_dir/etc/redhat-release"
            return
        fi
    fi
    if [  "$enable_file" == "" ]; then
        if [ -f $des_dir/boot/grub/menu.lst ]; then
            default=`cat $des_dir/boot/grub/menu.lst | grep "^default[ =][0-9]\+" | awk -F' |=' '{print $NF}'`
            let default=$default+1
            
            cat $des_dir/boot/grub/menu.lst | grep ^title | head -n $default | tail -n 1 | grep -i "Red Hat" 1>/dev/null 2>&1      
            ret1=$?
            
            cat $des_dir/boot/grub/menu.lst | grep ^title | head -n $default | tail -n 1 | grep -i "Aliyun Linux" 1>/dev/null 2>&1
            ret2=$?
            if [ $ret1 -ne 1 -o $ret2 -ne 1 ]; then
                vm_issue="redhat"
                return
            fi
        fi
    fi

}


# Aliyun Linux release 5.7 / 15.01

# Relative Files:
# /etc/issue
function get_aliyun()
{
    target_file="$des_dir/etc/issue"
    if [ -f "$target_file" ] ; then
        grep -i -q "Aliyun" "$target_file"
        if [ $? -eq 0 ]; then
            big=$(cat "$target_file" | head -n 1 | awk -F '.' '{print $1}' | awk '{print $NF}')    # get big version
            if [ "$big" -ge 15 ]; then    # Aliyun Linux release 15.01 -> 15 -> aliyun
                vm_issue="aliyun"
                enable_file="$target_file"
                return
            elif [ "$big" -eq 5 ]; then   # Aliyun Linux release 5.7 -> 5 -> redhat
                vm_issue='redhat'
                enable_file="$target_file"
                return
            fi
        fi
    fi
}

# this function support the centos7, not need modify
function get_centos()
{

    for i in issue issue.net centos-release redhat-release ; do
        [[ ! -f $des_dir/etc/$i ]] && continue
        grep -i -q 'CentOS' $des_dir/etc/$i
        if [[ $? -eq 0 ]]; then
            vm_issue='centos'
            enable_file=$des_dir/etc/$i
            return
        fi
    done

    if [  "$enable_file" == "" ]; then
        if [ -f $des_dir/boot/grub/menu.lst ]; then
            default=`cat $des_dir/boot/grub/menu.lst | grep "^default[ =][0-9]\+" | awk -F' |=' '{print $NF}'`
            let default=$default+1
            
            cat $des_dir/boot/grub/menu.lst | grep ^title | head -n $default | tail -n 1 | grep -i "CentOS" 1>/dev/null 2>&1      
            ret1=$?
            
            if [ $ret1 -ne 1 ]; then
                vm_issue="centos"
                return
            fi
        fi
    fi
}

function get_ubuntu()
{
    grep -i "Ubuntu" $des_dir/etc/issue >& /dev/null
    if [[ $? == 0 ]]; then
        vm_issue='ubuntu'
        enable_file="$des_dir/etc/issue"
        return
    fi
    if [ -f $des_dir/etc/lsb-release ]; then
        cat $des_dir/etc/lsb-release | grep -i "Ubuntu" 1>/dev/null  2>&1
        ret1=$?
        if [ $ret1 -ne 1 ]; then
            vm_issue="ubuntu"
            enable_file="$des_dir/etc/lsb-release"
            return
        fi
    fi

    if [  "$enable_file" == "" ]; then
       if [ -f $des_dir/boot/grub/grub.cfg ]; then
            default=`cat $des_dir/boot/grub/grub.cfg | grep default  | grep -v -E "^#|next_entry" | grep -i "default=.*"| awk -F '=' {'print $2'} | sed "s/\"//g"` 2>/dev/null
            let default=$default+1
            
            cat $des_dir/boot/grub/grub.cfg | grep ^title | head -n $default | tail -n 1 | grep -i "Ubuntu" 1>/dev/null 2>&1      
            ret1=$?
            
            if [ $ret1 -ne 1 ]; then
                vm_issue="ubuntu"
                return
            fi
       fi
    fi
}

function get_debian()
{
    for i in 'issue' 'issue.net' 'os-release'; do
        if grep -i -q 'Debian' $des_dir/etc/$i >& /dev/null ; then
            vm_issue='debian'
            enable_file="$des_dir/etc/$i"
            return
        fi
	done
    if [ -f  $des_dir/etc/lsb-release ]; then
        cat $des_dir/etc/lsb-release | grep -i "Debian" 1>/dev/null  2>&1
        ret1=$?
        if [ $ret1 -ne 1 ]; then
            vm_issue="debian"
            enable_file="$des_dir/etc/lsb-release"
            return
        fi
    fi
    
    if [  "$enable_file" == "" ]; then
        if [  -f $des_dir/boot/grub/grub.cfg ]; then
            default=`cat $des_dir/boot/grub/grub.cfg | grep default  | grep -v -E "^#|next_entry" | grep -i "default=.*"| awk -F '=' {'print $2'} | sed "s/\"//g"` 2>/dev/null
            let default=$default+1
        
            cat $des_dir/boot/grub/grub.cfg | grep ^title | head -n $default | tail -n 1 | grep -i "Debian" 1>/dev/null 2>&1      
            ret1=$?
        
            if [ $ret1 -ne 1 ]; then
                vm_issue="debian"
                return
            fi
        fi
    fi

}

function get_opensuse()
{
    grep -i -q 'openSUSE' $des_dir/etc/issue >& /dev/null
    if [[ $? == 0 ]]; then
        vm_issue='opensuse'
        enable_file="$des_dir/etc/issue"
        return
    fi
    if [ -f  $des_dir/etc/os-release ]; then
        cat $des_dir/etc/os-release | grep -i "openSUSE" 1>/dev/null  2>&1
        ret1=$?
        if [ $ret1 -ne 1 ]; then
            vm_issue="opensuse"
            enable_file="$des_dir/etc/os-release"
            return
        fi
    fi
    if [ -f  $des_dir/etc/default/grub ]; then
        cat $des_dir/etc/default/grub | grep -i "openSUSE" 1>/dev/null  2>&1
        ret1=$?
        if [ $ret1 -ne 1 ]; then
            vm_issue="opensuse"
            enable_file="$des_dir/etc/default/grub"
            return
        fi
    fi
}


function get_gentoo()
{
# making judgement based on these 5 files:

# /etc/issue: not work, ignore it
# /etc/gentoo-release
# /etc/lsb-release
# /etc/os-release
# /boot/grub/grub.cfg


    files="/etc/gentoo-release  /etc/lsb-release /etc/os-release"
    for issue_file in ${files[@]}; do
        target_file=$des_dir$issue_file    # // /
        [ -f "$target_file" ] && grep -i "gentoo" "$target_file" >& /dev/null
        if [ $? -eq 0 ]; then
            vm_issue="gentoo"
            enable_file="$target_file"
            return
        fi
    done

    # get issue by parsing the grub.cfg now
    if [ "$enable_file" == "" ]; then
        if [ -f $des_dir/boot/grub/grub.cfg ]; then
            default=`cat $des_dir/boot/grub/grub.cfg | grep default | grep -v -E "^#|next_entry" | grep -i "default=.*" | awk -F '=' '{print $2}' | sed "s/\"//g"` 2>/dev/null
            let default=$default+1
            cat $des_dir/boot/grub/grub.cfg | grep ^menuentry | head -n $default | tail -n 1 | grep -i "gentoo" 1> /dev/null 2>&1
            ret1=$?
            if [ $re1 -ne 1 ]; then
                vm_issue="gentoo"
                return
            fi
        fi
    fi
}


# 2014.11.24
# files:
# /etc/issue : don't have os info
# /etc/os-release: check
# /etc/lsb-release: check
function get_coreos()
{
    for file in /etc/os-release /etc/lsb-release; do
        issue_file="$des_dir$file"
        if [ -f $issue_file ]; then
            grep -q -i 'coreos' $issue_file
            if [[ $? == 0 ]]; then
                vm_issue='coreos'
                enable_file="$issue_file"
            fi
        fi
    done
    # ? check grub ?
}

function get_freebsd()
{
# the FreeBSD dont' have the /etc/issue /etc/os-release /etc/system-release file
# so use these files:
# /etc/motd
# /etc/gettytab
    for file in etc/motd etc/gettytab; do
        target_file="$des_dir/$file"
        grep -q 'FreeBSD' "$target_file" >& /dev/null    # charactor case-sensitive
        if [[ $? == 0 ]]; then
            vm_issue='freebsd'
            enable_file="$target_file"
            return
        fi
    done
}


function get_suse()
{
# /etc/SuSE-release
# /etc/issue.net
# /etc/issue
for issue_file in SuSE-release issue.net issue ; do
    target_file=$des_dir/etc/$issue_file
    [ -f "$target_file" ] && grep -q -i 'SUSE Linux Enterprise Server' $target_file >& /dev/null
    if [[ $? == 0 ]]; then
        vm_issue='suse'
        enable_file="$target_file"
        return
    fi
done

if [ "$enable_file" == "" -a -f "$des_dir/boot/grub/menu.lst" ]; then
    grep -q 'title SUSE Linux Enterprise Server' "$des_dir/boot/grub/menu.lst"
    if [ $? -eq 0 ]; then
        vm_issue="suse"
        enable_file="$des_dir/boot/grub/menu.lst"
        return
    fi
fi

if [ "$enable_file" == "" -a -f "$des_dir/boot/grub2/grub.cfg" ]; then    # suse 12
    grep -q "^menuentry\s\+'SLES1[0-9]'" "$des_dir/boot/grub2/grub.cfg"
    if [ $? -eq 0 ]; then
		vm_issue="suse"
		enable_file="$des_dir/boot/grub2/grub.cfg"
		return
	fi
fi
}

function get_alios()
{
# /etc/issue:           Alibaba Group Enterprise Linux Server release 6.2
# /etc/redhat-release:  Alibaba Group Enterprise Linux Server release 6.2
# /etc/alios-release：  Alibaba Group Enterprise Linux Server release 6.2
# /boot/grub/grub.conf: Alibaba Group Enterprise Linux Server 6.2
local issue_file target_file
for issue_file in /etc/issue /etc/redhat-release /etc/alios-release /boot/grub/grub.conf ; do
    target_file="$des_dir$issue_file"  # not use '/'
    [ -f "$target_file" ] && grep -q -i 'Alibaba Group Enterprise Linux Server' $target_file >& /dev/null
    if [[ $? == 0 ]]; then
        vm_issue='alios'
        enable_file="$target_file"
        return
    fi
done
}

function get_issue()
{
    vm_issue=""
    enable_file=""

func_list=(
get_aliyun
get_redhat
get_centos
get_alios
get_ubuntu
get_debian
get_opensuse
get_suse
get_coreos
get_freebsd
get_gentoo
)
	for f in ${func_list[@]}; do
		$f
		[[ -n $vm_issue ]] && return
	done
}

# this function support the centos7, not need modify
function get_redhat_centos_version()
{
    if [  "$issue" == "redhat" -o "$issue" == "centos" ]; then
        if [ -f $des_dir/etc/redhat-release ]; then
            big=`cat $des_dir/etc/redhat-release | head -n 1 | awk -F'.' {'print $1'} | awk {'print $NF'}`
            small=`cat $des_dir/etc/redhat-release | head -n 1 | awk -F'.' {'print $2'} | awk {'print $1'}`
            if [ "$big" != "" ]; then
                ret_big=$(is_digit $big)
                if [ $ret_big -ne 1 ]; then
                    big_enable=0
                else
                    big_enable=1
                fi
            else
                ret_big=0
                big_enable=0
            fi
            if [ "$small" != "" ]; then  
                ret_small=$(is_digit $small)
                if [ $ret_small -ne 1 ]; then
                   small_enable=0
                else
                   small_enable=1
                fi
            else
                ret_small=0
                small_enable=0
            fi
            if [ $ret_big -eq 1 -a $ret_small -eq 1 ]; then
                issue_version="$big"."$small"
                return
            fi
        fi
    fi
}

function get_ubuntu_version()
{
    if [  "$issue" == "ubuntu" ]; then
        if [ -f $des_dir/etc/lsb-release ]; then
            big=`cat $des_dir/etc/lsb-release | grep DISTRIB_RELEASE | awk -F'=' {'print $2'} | awk -F'.' {'print $1'} | awk {'print $NF'}`
        
            small=`cat $des_dir/etc/lsb-release | grep DISTRIB_RELEASE | awk -F'=' {'print $2'} | awk -F'.' {'print $2'} | awk {'print $1'}`
            if [ "$big" != "" ]; then
                ret_big=$(is_digit $big)
                if [ $ret_big -ne 1 ]; then
                    big_enable=0
                else
                    big_enable=1
                fi
            else
               ret_big=0
               big_enable=0
            fi
            if [ "$small" != "" ]; then  
                ret_small=$(is_digit $small)
                if [ $ret_small -ne 1 ]; then
                    small_enable=0
                else
                    small_enable=1
                fi   
            else
                ret_small=0
                small_enable=0
            fi
            if [ $ret_big -eq 1 -a $ret_small -eq 1 ]; then
                issue_version="$big"."$small"
                return
            fi
        fi
    fi
}

function get_debian_version()
{
    if [ "$issue" == "debian" ]; then
        if [ -f $des_dir/etc/debian_version ]; then
            big=`cat $des_dir/etc/debian_version | awk -F'.' {'print $1'}`
            small=`cat $des_dir/etc/debian_version | awk -F'.' {'print $2'}`
            
            if [ "$big" != "" ]; then
                ret_big=$(is_digit $big)
                if [ $ret_big -ne 1 ]; then
                    big_enable=0
                else
                    big_enable=1
                fi
            else
                ret_big=0
                big_enable=0
            fi
            if [ "$small" != "" ]; then  
                ret_small=$(is_digit $small)
                if [ $ret_small -ne 1 ]; then
                    small_enable=0
                else
                    small_enable=1
                fi
            else
                ret_small=0
                small_enable=0
            fi
            if [ $ret_big -eq 1 -a $ret_small -eq 1 ]; then
                issue_version="$big"."$small"
                return
            fi
        elif [[ -f $des_dir/etc/os-release ]]; then
            big=$(awk -F'=' '/VERSION_ID/ {print $2}' $des_dir/etc/os-release | sed 's/"//g')
			if [[ $(is_digit $big) == '1' ]]; then
				big_enable=1
				return
			fi
        else
			for i in 'issue' 'issue.net' ; do
				big=$(grep -E 'Debian.* [[:digit:]]' -o $des_dir/etc/$i | awk '{print $NF}')
				if [[ $(is_digit $big) == '1' ]]; then
					big_enable=1
					return
				fi
			done
        fi
    fi
}

function get_opensuse_version()
{
     if [ "$issue" == "opensuse" ]; then
          if [ -f $des_dir/etc/os-release ]; then
              v=`cat $des_dir/etc/os-release | grep "VERSION_ID" | awk -F'=' {'print $2'} | sed "s/\"//g"`
              big=`echo $v | awk -F'.' {'print $1'}`
              small=`echo $v | awk -F'.' {'print $2'}`
              
              if [ "$big" != "" ]; then
                  ret_big=$(is_digit $big)
                  if [ $ret_big -ne 1 ]; then
                      big_enable=0
                  else
                      big_enable=1
                  fi
              else
                  ret_big=0
                  big_enable=0
              fi
              if [ "$small" != "" ]; then  
                  ret_small=$(is_digit $small)
                  if [ $ret_small -ne 1 ]; then
                      small_enable=0
                  else
                      small_enable=1
                  fi
              else
                  ret_small=0
                  small_enable=0
              fi
              if [ $ret_big -eq 1 -a $ret_small -eq 1 ]; then
                  issue_version="$big"."$small"
                  return
              fi
          fi
          if [ -f $des_dir/etc/default/grub ]; then
              v=`cat $des_dir/etc/default/grub | grep "GRUB_DISTRIBUTOR" | awk -F'=' {'print $2'} | sed "s/\"//g"`
              big=`echo $v | awk {'print $2'} | awk -F'.' {'print $1'}`
              small=`echo $v | awk {'print $2'} |  awk -F'.' {'print $2'}`
              
              if [ "$big" != "" ]; then
                  ret_big=$(is_digit $big)
                  if [ $ret_big -ne 1 ]; then
                      big_enable=0
                  else
                      big_enable=1
                  fi
              else
                  ret_big=0
                  big_enable=0
              fi
              if [ "$small" != "" ]; then  
                  ret_small=$(is_digit $small)
                  if [ $ret_small -ne 1 ]; then
                      small_enable=0
                  else
                      small_enable=1
                  fi
              else
                  ret_small=0
                  small_enable=0
              fi
              if [ $ret_big -eq 1 -a $ret_small -eq 1 ]; then
                  issue_version="$big"."$small"
                  return
              fi
          fi

     fi
}

function get_gentoo_version()
{
    if [ "$issue" == "gentoo" ]; then
        big_enable=1
        big="13"               # hardcode 13, temporary.
        issue_version="$big"
    fi
    return
}

# 2014.11.24
# /etc/os-release
# /etc/lsb-release
function get_coreos_version()
{
    if [ "$vm_issue" == "coreos" ]; then
        file="$des_dir/etc/os-release"
        [ -f "$file" ] && big=`awk -F'=' '/^VERSION/ {print $2}' $file | head -n 1 | awk -F'.' '{print $1}'`
        if [ "$big" != "" ]; then
            big_enable=1
            issue_version="$big"
            return
        fi

        file="$des_dir/etc/lsb-release"
        [ -f "$file" ] && big=`awk -F'=' '/^DISTRIB_RELEASE/ {print $2}' $file | head -n 1 | awk -F'.' '{print $1}'`
        if [ "$big" != "" ]; then
            big_enable=1
            issue_version="$big"
            return
        fi
    fi
}

function get_freebsd_version()
{
# /etc/motd
# /etc/gettytab
    if [ "$issue" == "freebsd" ]; then
        if [ -e "$enable_file" ]; then
            ver=`cat $enable_file | grep 'FreeBSD' | grep 'RELEASE' | awk -F' |-' '{print $2}'`
            big=`echo $ver | awk -F'.' '{print $1}'`
            small=`echo $ver | awk -F'.' '{print $2}'`
            issue_version="$big"
            big_enable="1"
            return
        fi
        for file in etc/motd etc/gettytab; do
            target_file="$des_dir/$file"
            if [ -e "$target_file" ]; then
                ver=`cat $target_file | grep 'FreeBSD' | grep 'RELEASE' | awk -F' |-' '{print $2}'`
                big=`echo $ver | awk -F'.' '{print $1}'`
                small=`echo $ver | awk -F'.' '{print $2}'`
                issue_version="$big"
                big_enable="1"
                return
            fi
        done
	fi
}


# for: SUSE Linux Enterprise Server
function get_suse_version()
{
    if [ "$issue" == "suse" -a -f "$enable_file" ]; then
        if [ "$enable_file" == "$des_dir/etc/issue" -o \
             "$enable_file" == "$des_dir/etc/issue.net" -o \
             "$enable_file" == "$des_dir/boot/grub/menu.lst" ]; then
            big=$(cat $enable_file | grep 'SUSE Linux Enterprise Server 1[0-9]'   -o | head -n 1 | awk '{print $NF}')
            small=$(cat $enable_file | grep 'SUSE Linux Enterprise Server 1[0-9] SP[0-9]*' -o | head -n 1 |  awk '{print $NF}' | sed 's/SP//g')
        elif [ "$enable_file" == "$des_dir/etc/SuSE-release" ]; then
            big=$(cat "$enable_file" | awk -F' |=' '/VERSION/ {print $NF}')
            small=$(cat "$enable_file" | awk -F' |=' '/PATCHLEVEL/ {print $NF}')
        fi
        [ -n "$big" ] && big_enable=1
        [ -n "$small" ] && small_enable=1
        issue_version="$big"."$small"
        return
    fi
}

function get_alios_version()
{
# /etc/redhat-release
# /etc/alios-release
# /boot/grub/grub.conf
    [ "$issue" != "alios" ] && return
    local issue_file target_file
    for issue_file in alios-release redhat-release; do
        target_file="$des_dir/etc/$issue_file"
        [ ! -f "$target_file" ] && continue
        big=`cat $target_file   | head -n 1 | awk -F'.' {'print $1'} | awk {'print $NF'}`
        small=`cat $target_file | head -n 1 | awk -F'.' {'print $2'} | awk {'print $1'}`
        if [ "$big" != "" ]; then
            ret_big=$(is_digit $big)
            if [ $ret_big -ne 1 ]; then
                big_enable=0
            else
                big_enable=1
            fi
        else
            ret_big=0
            big_enable=0
        fi
        if [ "$small" != "" ]; then
            ret_small=$(is_digit $small)
            if [ $ret_small -ne 1 ]; then
               small_enable=0
            else
               small_enable=1
            fi
        else
            ret_small=0
            small_enable=0
        fi
        if [ $ret_big -eq 1 -a $ret_small -eq 1 ]; then
            issue_version="$big"."$small"
            return
        fi
    done
}

function get_issue_version()
{
    big=""
    small=""
    big_enable=1
    small_enable=1
    if [ "$enable_file" == "" ]; then
        #glogger -o "[`now`] failed to find the issue info file" -t $default_time 1>/dev/null 2>&1
        echo "failed to find $issue version"
        #exit 1
    fi
    if [ "$enable_file" == "$des_dir/etc/issue" ]; then
        big=`cat $enable_file | head -n 1 | awk -F'.' {'print $1'} | awk {'print $NF'}`
        small=`cat $enable_file | head -n 1 | awk -F'.' {'print $2'} | awk {'print $1'}`
        if [ "$big" != "" ]; then
            ret_big=$(is_digit $big)
            if [ "$small" != "" ]; then
                ret_small=$(is_digit $small)
                if [ $ret_small -ne 1 ]; then
                    small_enable=0
                fi
            else
                ret_small=0
                small_enable=0
            fi
                
            if [ $ret_big -ne 1 ]; then
                big_enable=0
            fi

            if [ $ret_big -eq 0 -o $ret_small -eq 0 ]; then
                get_redhat_centos_version

                get_ubuntu_version

                get_debian_version

                get_opensuse_version

                get_suse_version

				get_alios_version

            else
                issue_version="$big"."$small"
                return
            fi
                
        fi
    else
        get_redhat_centos_version

        get_ubuntu_version

        get_debian_version

        get_opensuse_version

        get_gentoo_version

        get_coreos_version

        get_freebsd_version

        get_suse_version

		get_alios_version

    fi
    
    if [ "$issue" == "redhat" ]; then
        if [ $big_enable -eq 0 ]; then
            glogger -o "[`now`] 3116:failed to find $issue version" -t $default_time 1>/dev/null 2>&1
            echo "3116:failed to find $issue version"
            exit 1
        fi
    fi
       
    if [ "$issue" == "centos" ]; then
        if [ $big_enable -eq 0 ]; then
            glogger -o "[`now`] 3117:failed to find $issue version" -t $default_time 1>/dev/null 2>&1
            echo "3117:failed to find $issue version"
            exit 1
        fi
    fi

    if [ "$issue" == "debian" ]; then
        if [ $big_enable -eq 0 ]; then
            glogger -o "[`now`] 3118: failed to find $issue version." -t $default_time 1>/dev/null 2>&1
            echo "3118:failed to find $issue version"
            exit 1
        fi
    fi

    if [ "$issue" == "ubuntu" ]; then
        if [ $big_enable -eq 0 -o  $small_enable -eq 0 ]; then
            glogger -o "[`now`] failed to find $issue  version, no default set" -t $default_time 1>/dev/null 2>&1
            exit 1
        fi
    fi
    if [ "$issue" == "opensuse" ]; then
        if [ $big_enable -eq 0 -o  $small_enable -eq 0 ]; then
            glogger -o "[`now`] failed to find $issue  version, no default set" -t $default_time 1>/dev/null 2>&1
            exit 1
        fi
    fi

        
}



function check_issue()
{
    issue=$vm_issue
}


#########################################################################
# portal

# convert issue to lower case
issue=$(echo $issue | tr 'A-Z' 'a-z')


if [[ "$issue" == 'mars' ]]; then
    vm_issue='mars'
    big='ares'
    return
elif [[ "$issue" == 'freebsd' ]]; then
    vm_issue='freebsd'
    get_freebsd_version
    [[ -z "$big" ]] && big=10
    return
fi


check_arch


if [[ "$issue" == 'gentoo' ]]; then
    vm_issue='gentoo'
    big=13
    return
elif [[ "$issue" == 'coreos' ]]; then
    vm_issue='coreos'
    big=current
    return
fi


if echo $issue | egrep -q '^[a-z]+[0-9]+$' ; then
	big=$(echo $issue | egrep -o '[0-9]+')
	issue=$(echo $issue | egrep -o '^[a-z]+')
	return
fi


get_issue

check_issue

get_issue_version


if [ "$issue" = "" -o "$issue_version" = "" ]; then
   # glogger -o "[`now`] 3119:failed to parse issue $issue and issue_version $issue_version" -t $default_time 1>/dev/null 2>&1
    echo "3119:failed to parse issue $issue and issue_version $issue_version"
   # exit 1
fi


################## hack for 'aliyun 15.01' by kaihuan.pkh 2015.01.05 #########################################
if [ "$issue" == "aliyun" ]; then
    # for aliyun, in get_issue_version(): ret_big = 1 and ret_small = 1, => issue_version=15.01
    # big   = 5 / 15
    # small = 7 / 01
    # issue_version=15.01 need change to => issue_versin=1501, big=1501
    if [ "$big" -ge 15 ]; then       # hardcode
        big="$big$small"             # 1501
    fi
fi
