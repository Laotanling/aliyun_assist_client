# CMake 最低版本要求
# CMake_minimum_required (VERSION 2.8)

# 项目信息
 project (aliyun-assist)

# 包含头文件和库文件目录 
include_directories(${CMAKE_CURRENT_BINARY_DIR})
include_directories(../third_party)
include_directories(../common)
include_directories(../task_engine)

link_directories(../common)
add_definitions(-DCURL_STATICLIB)
if(WIN32)
    set(CMAKE_EXE_LINKER_FLAGS_RELEASE "/INCREMENTAL:NO /DEBUG")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /SAFESEH:NO")
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MT")
    set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MTd")
    include_directories(./windows)
    aux_source_directory(./windows DIR_SRCS)
    link_libraries(shlwapi Psapi version)
    link_libraries(ws2_32 Wldap32)
    link_libraries(libcurl.lib)
    link_libraries(libeay32)
    link_libraries(ssleay32)
    link_libraries(PowrProf)
    include_directories(../third_party/libcurl/windows/include)
    link_directories(../third_party/libcurl/windows/lib)
    add_definitions(-DUNICODE -D_UNICODE)  
else(UNIX)
    include_directories(../third_party/libcurl/linux/include)
    link_directories(../third_party/libcurl/linux/lib)
    include_directories(./linux)
    aux_source_directory(./linux DIR_SRCS)
    add_compile_options(-std=c++11)
    link_libraries(rt curl ssl crypto)
if(DEFINED ENV{USE_STATIC_LINK})
    set (CMAKE_C_FLAGS  "${CMAKE_C_FLAGS} -I../third_party/glibc/include")
endif()
endif()
    link_libraries(assist-common)
    link_libraries(third_party)
    aux_source_directory(../task_engine DIR_SRCS)
    aux_source_directory(../task_engine/plugin DIR_SRCS)
if(WIN32)
    add_executable(aliyun_assist_service ${DIR_SRCS} service_win.cpp gshell_win.cpp ./windows/xs_shell.cc ./windows/xs.cc ../VersionResource.rc)
else(UNIX)
    add_executable(aliyun-service ${DIR_SRCS} service_linux.cpp gshell_linux.cpp ./linux/xs_shell.cc ./linux/xs.c ../VersionResource.rc)
endif()

if(WIN32)
SET_TARGET_PROPERTIES(aliyun_assist_service PROPERTIES RUNTIME_OUTPUT_DIRECTORY_DEBUG   ${CMAKE_CURRENT_SOURCE_DIR}/../output/)
SET_TARGET_PROPERTIES(aliyun_assist_service PROPERTIES RUNTIME_OUTPUT_DIRECTORY_RELEASE ${CMAKE_CURRENT_SOURCE_DIR}/../output/)
else(UNIX)
if(DEFINED ENV{USE_STATIC_LINK})
TARGET_LINK_LIBRARIES(aliyun-service "-nostdlib -nostartfiles -static ../third_party/glibc/lib/crt1.o ../third_party/glibc/lib/crti.o   -Wl,--start-group ../third_party/glibc/lib/libpthread.a -lstdc++   ../third_party/glibc/lib/librt.a ../third_party/glibc/lib/libc.a  ../third_party/libcurl/linux/lib/libcurl.a -ldl -lgcc  -lgcc_eh -Wl,--end-group  ../third_party/glibc/lib/crtn.o")
else()
TARGET_LINK_LIBRARIES(aliyun-service  -lpthread -ldl)
endif()
SET_TARGET_PROPERTIES(aliyun-service PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/../output/)
endif()
